From f2fd96af8e58439562ccb8ff8c41827584c622f4 Mon Sep 17 00:00:00 2001
From: "Kaleb S. KEITHLEY" <kkeithle@redhat.com>
Date: Wed, 5 Nov 2014 11:27:15 -0500
Subject: [PATCH 18/25] api: versioned symbols in libgfapi.so for compatibility

Use versioned symbols to keep libgfapi at libgfapi.so.0.0.0

Some nits uncovered:

+ there are a couple functions declared that do not have an
  associated definition, e.g. glfs_truncate(), glfs_caller_specific_init()

+ there are five private/internal functions used by heal/src/glfsheal
  and the gfapi master xlator (glfs-master.c): glfs_loc_touchup(),
  glfs_active_subvol(), and glfs_subvol_done(), glfs_init_done(),
  glfs_resolve_at(); which are not declared in glfs.h;

+ for this initial pass at versioned symbols, we use the earliest version
  of all public symbols, i.e. those for which there are declarations in
  glfs.h or glfs-handles.h.
  Further investigation as we do backports to 3.6, 3.4, and 3.4
  will be required to determine if older implementations need to
  be preserved (forward ported) and their associated alias(es) and
  symbol version(s) defined.

FWIW, we should consider linking all of our libraries with a map, it'll
result in a cleaner ABI. Perhaps something for an intern to do or a
Google Summer of Code project.

Change-Id: I513b9aad9c5fd7d8b34ff33acac35f37b6baaab6
BUG: 1160711
Signed-off-by: Kaleb S. KEITHLEY <kkeithle@redhat.com>
Reviewed-on: http://review.gluster.org/9056
Tested-by: Gluster Build System <jenkins@build.gluster.com>
Reviewed-by: Niels de Vos <ndevos@redhat.com>
---
 .gitignore               |   1 +
 api/src/Makefile.am      |   1 +
 api/src/gfapi.map.in     | 141 +++++++++++
 api/src/glfs-fops.c      | 614 ++++++++++++++++++++++++++++++-----------------
 api/src/glfs-handleops.c | 199 +++++++++------
 api/src/glfs-internal.h  |  25 +-
 api/src/glfs-master.c    |  12 +-
 api/src/glfs-mgmt.c      |  18 +-
 api/src/glfs-resolve.c   |  29 ++-
 api/src/glfs.c           |  77 ++++--
 configure.ac             |   1 +
 heal/src/glfs-heal.c     |   4 +
 12 files changed, 785 insertions(+), 337 deletions(-)
 create mode 100644 api/src/gfapi.map.in

diff --git a/api/src/Makefile.am b/api/src/Makefile.am
index 7c5df3e..f7e66e5 100644
--- a/api/src/Makefile.am
+++ b/api/src/Makefile.am
@@ -15,6 +15,7 @@ libgfapi_la_CPPFLAGS = $(GF_CPPFLAGS) -D__USE_FILE_OFFSET64 \
 	-I$(top_srcdir)/rpc/rpc-lib/src \
 	-I$(top_srcdir)/rpc/xdr/src
 
+libgfapi_la_LDFLAGS = -Wl,--version-script=gfapi.map
 
 xlator_LTLIBRARIES = api.la
 xlatordir = $(libdir)/glusterfs/$(PACKAGE_VERSION)/xlator/mount
diff --git a/api/src/gfapi.map.in b/api/src/gfapi.map.in
new file mode 100644
index 0000000..af89dfc
--- /dev/null
+++ b/api/src/gfapi.map.in
@@ -0,0 +1,141 @@
+
+GFAPI_PRIVATE_3.4.0 {
+	global:
+		glfs_loc_touchup;
+		glfs_active_subvol;
+		glfs_subvol_done;
+		glfs_init_done;
+		glfs_resolve_at;
+	local: *;
+};
+
+GFAPI_3.4.0 {
+	global:
+		glfs_new;
+		glfs_set_volfile;
+		glfs_set_volfile_server;
+		glfs_set_logging;
+		glfs_init;
+		glfs_fini;
+		glfs_open;
+		glfs_creat;
+		glfs_close;
+		glfs_from_glfd;
+		glfs_set_xlator_option;
+		glfs_read;
+		glfs_write;
+		glfs_read_async;
+		glfs_write_async;
+		glfs_readv;
+		glfs_writev;
+		glfs_readv_async;
+		glfs_writev_async;
+		glfs_pread;
+		glfs_pwrite;
+		glfs_pread_async;
+		glfs_pwrite_async;
+		glfs_preadv;
+		glfs_pwritev;
+		glfs_preadv_async;
+		glfs_pwritev_async;
+		glfs_lseek;
+		glfs_truncate;
+		glfs_ftruncate;
+		glfs_ftruncate_async;
+		glfs_lstat;
+		glfs_stat;
+		glfs_fstat;
+		glfs_fsync;
+		glfs_fsync_async;
+		glfs_fdatasync;
+		glfs_fdatasync_async;
+		glfs_access;
+		glfs_symlink;
+		glfs_readlink;
+		glfs_mknod;
+		glfs_mkdir;
+		glfs_unlink;
+		glfs_rmdir;
+		glfs_rename;
+		glfs_link;
+		glfs_opendir;
+		glfs_readdir_r;
+		glfs_readdirplus_r;
+		glfs_telldir;
+		glfs_seekdir;
+		glfs_closedir;
+		glfs_statvfs;
+		glfs_chmod;
+		glfs_fchmod;
+		glfs_chown;
+		glfs_lchown;
+		glfs_fchown;
+		glfs_utimens;
+		glfs_lutimens;
+		glfs_futimens;
+		glfs_getxattr;
+		glfs_lgetxattr;
+		glfs_fgetxattr;
+		glfs_listxattr;
+		glfs_llistxattr;
+		glfs_flistxattr;
+		glfs_setxattr;
+		glfs_lsetxattr;
+		glfs_fsetxattr;
+		glfs_removexattr;
+		glfs_lremovexattr;
+		glfs_fremovexattr;
+		glfs_getcwd;
+		glfs_chdir;
+		glfs_fchdir;
+		glfs_realpath;
+		glfs_posix_lock;
+		glfs_dup;
+} GFAPI_PRIVATE_3.4.0;
+
+GFAPI_3.4.2 {
+	global:
+		glfs_setfsuid;
+		glfs_setfsgid;
+		glfs_setfsgroups;
+		glfs_h_lookupat;
+		glfs_h_creat;
+		glfs_h_mkdir;
+		glfs_h_mknod;
+		glfs_h_symlink;
+		glfs_h_unlink;
+		glfs_h_close;
+		glfs_h_truncate;
+		glfs_h_stat;
+		glfs_h_getattrs;
+		glfs_h_setattrs;
+		glfs_h_readlink;
+		glfs_h_link;
+		glfs_h_rename;
+		glfs_h_extract_handle;
+		glfs_h_create_from_handle;
+		glfs_h_opendir;
+		glfs_h_open;
+} GFAPI_3.4.0;
+
+GFAPI_3.5.0 {
+	global:
+		glfs_get_volumeid;
+		glfs_readdir;
+		glfs_readdirplus;
+		glfs_fallocate;
+		glfs_discard;
+		glfs_discard_async;
+		glfs_zerofill;
+		glfs_zerofill_async;
+		glfs_caller_specific_init;
+		glfs_h_setxattrs;
+} GFAPI_3.4.2;
+
+GFAPI_3.5.1 {
+	global:
+		glfs_unset_volfile_server;
+		glfs_h_getxattrs;
+		glfs_h_removexattrs;
+} GFAPI_3.5.0;
+
diff --git a/api/src/glfs-fops.c b/api/src/glfs-fops.c
index b09dd90..66460e6 100644
--- a/api/src/glfs-fops.c
+++ b/api/src/glfs-fops.c
@@ -66,7 +66,7 @@ glfs_loc_unlink (loc_t *loc)
 
 
 struct glfs_fd *
-glfs_open (struct glfs *fs, const char *path, int flags)
+pub_glfs_open (struct glfs *fs, const char *path, int flags)
 {
 	int              ret = -1;
 	struct glfs_fd  *glfd = NULL;
@@ -77,7 +77,7 @@ glfs_open (struct glfs *fs, const char *path, int flags)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -138,14 +138,16 @@ out:
 		glfs_fd_bind (glfd);
 	}
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return glfd;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_open, 3.4.0);
+
 
 int
-glfs_close (struct glfs_fd *glfd)
+pub_glfs_close (struct glfs_fd *glfd)
 {
 	xlator_t  *subvol = NULL;
 	int        ret = -1;
@@ -154,7 +156,7 @@ glfs_close (struct glfs_fd *glfd)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
         if (!subvol) {
                 ret = -1;
                 errno = EIO;
@@ -176,14 +178,16 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_close, 3.4.0);
+
 
 int
-glfs_lstat (struct glfs *fs, const char *path, struct stat *stat)
+pub_glfs_lstat (struct glfs *fs, const char *path, struct stat *stat)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -193,7 +197,7 @@ glfs_lstat (struct glfs *fs, const char *path, struct stat *stat)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -209,14 +213,16 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_lstat, 3.4.0);
+
 
 int
-glfs_stat (struct glfs *fs, const char *path, struct stat *stat)
+pub_glfs_stat (struct glfs *fs, const char *path, struct stat *stat)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -226,7 +232,7 @@ glfs_stat (struct glfs *fs, const char *path, struct stat *stat)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -242,14 +248,16 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_stat, 3.4.0);
+
 
 int
-glfs_fstat (struct glfs_fd *glfd, struct stat *stat)
+pub_glfs_fstat (struct glfs_fd *glfd, struct stat *stat)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -258,7 +266,7 @@ glfs_fstat (struct glfs_fd *glfd, struct stat *stat)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -280,14 +288,16 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fstat, 3.4.0);
+
 
 struct glfs_fd *
-glfs_creat (struct glfs *fs, const char *path, int flags, mode_t mode)
+pub_glfs_creat (struct glfs *fs, const char *path, int flags, mode_t mode)
 {
 	int              ret = -1;
 	struct glfs_fd  *glfd = NULL;
@@ -300,7 +310,7 @@ glfs_creat (struct glfs *fs, const char *path, int flags, mode_t mode)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -416,14 +426,16 @@ out:
 		glfs_fd_bind (glfd);
 	}
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return glfd;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_creat, 3.4.0);
+
 
 off_t
-glfs_lseek (struct glfs_fd *glfd, off_t offset, int whence)
+pub_glfs_lseek (struct glfs_fd *glfd, off_t offset, int whence)
 {
 	struct stat sb = {0, };
 	int         ret = -1;
@@ -438,7 +450,7 @@ glfs_lseek (struct glfs_fd *glfd, off_t offset, int whence)
 		glfd->offset += offset;
 		break;
 	case SEEK_END:
-		ret = glfs_fstat (glfd, &sb);
+		ret = pub_glfs_fstat (glfd, &sb);
 		if (ret) {
 			/* seek cannot fail :O */
 			break;
@@ -450,12 +462,12 @@ glfs_lseek (struct glfs_fd *glfd, off_t offset, int whence)
 	return glfd->offset;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_lseek, 3.4.0);
 
-//////////////
 
 ssize_t
-glfs_preadv (struct glfs_fd *glfd, const struct iovec *iovec, int iovcnt,
-	     off_t offset, int flags)
+pub_glfs_preadv (struct glfs_fd *glfd, const struct iovec *iovec, int iovcnt,
+                 off_t offset, int flags)
 {
 	xlator_t       *subvol = NULL;
 	ssize_t         ret = -1;
@@ -467,7 +479,7 @@ glfs_preadv (struct glfs_fd *glfd, const struct iovec *iovec, int iovcnt,
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -501,14 +513,16 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_preadv, 3.4.0);
+
 
 ssize_t
-glfs_read (struct glfs_fd *glfd, void *buf, size_t count, int flags)
+pub_glfs_read (struct glfs_fd *glfd, void *buf, size_t count, int flags)
 {
 	struct iovec iov = {0, };
 	ssize_t      ret = 0;
@@ -516,15 +530,17 @@ glfs_read (struct glfs_fd *glfd, void *buf, size_t count, int flags)
 	iov.iov_base = buf;
 	iov.iov_len = count;
 
-	ret = glfs_preadv (glfd, &iov, 1, glfd->offset, flags);
+	ret = pub_glfs_preadv (glfd, &iov, 1, glfd->offset, flags);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_read, 3.4.0);
+
 
 ssize_t
-glfs_pread (struct glfs_fd *glfd, void *buf, size_t count, off_t offset,
-	    int flags)
+pub_glfs_pread (struct glfs_fd *glfd, void *buf, size_t count, off_t offset,
+                int flags)
 {
 	struct iovec iov = {0, };
 	ssize_t      ret = 0;
@@ -532,23 +548,27 @@ glfs_pread (struct glfs_fd *glfd, void *buf, size_t count, off_t offset,
 	iov.iov_base = buf;
 	iov.iov_len = count;
 
-	ret = glfs_preadv (glfd, &iov, 1, offset, flags);
+	ret = pub_glfs_preadv (glfd, &iov, 1, offset, flags);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_pread, 3.4.0);
+
 
 ssize_t
-glfs_readv (struct glfs_fd *glfd, const struct iovec *iov, int count,
-	    int flags)
+pub_glfs_readv (struct glfs_fd *glfd, const struct iovec *iov, int count,
+                int flags)
 {
 	ssize_t      ret = 0;
 
-	ret = glfs_preadv (glfd, iov, count, glfd->offset, flags);
+	ret = pub_glfs_preadv (glfd, iov, count, glfd->offset, flags);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_readv, 3.4.0);
+
 
 struct glfs_io {
 	struct glfs_fd      *glfd;
@@ -575,6 +595,23 @@ glfs_io_async_cbk (int ret, call_frame_t *frame, void *data)
 	return 0;
 }
 
+ssize_t
+pub_glfs_pwritev (struct glfs_fd *, const struct iovec *, int, off_t, int);
+
+int
+pub_glfs_ftruncate (struct glfs_fd *, off_t);
+
+int
+pub_glfs_fdatasync (struct glfs_fd *);
+
+int
+pub_glfs_fsync (struct glfs_fd *glfd);
+
+int
+pub_glfs_discard (struct glfs_fd *, off_t, size_t);
+
+int
+pub_glfs_zerofill (struct glfs_fd *, off_t, off_t);
 
 static int
 glfs_io_async_task (void *data)
@@ -584,23 +621,23 @@ glfs_io_async_task (void *data)
 
 	switch (gio->op) {
 	case GF_FOP_WRITE:
-		ret = glfs_pwritev (gio->glfd, gio->iov, gio->count,
+		ret = pub_glfs_pwritev (gio->glfd, gio->iov, gio->count,
 				    gio->offset, gio->flags);
 		break;
 	case GF_FOP_FTRUNCATE:
-		ret = glfs_ftruncate (gio->glfd, gio->offset);
+		ret = pub_glfs_ftruncate (gio->glfd, gio->offset);
 		break;
 	case GF_FOP_FSYNC:
 		if (gio->flags)
-			ret = glfs_fdatasync (gio->glfd);
+			ret = pub_glfs_fdatasync (gio->glfd);
 		else
-			ret = glfs_fsync (gio->glfd);
+			ret = pub_glfs_fsync (gio->glfd);
 		break;
 	case GF_FOP_DISCARD:
-		ret = glfs_discard (gio->glfd, gio->offset, gio->count);
+		ret = pub_glfs_discard (gio->glfd, gio->offset, gio->count);
 		break;
         case GF_FOP_ZEROFILL:
-                ret = glfs_zerofill(gio->glfd, gio->offset, gio->count);
+                ret = pub_glfs_zerofill(gio->glfd, gio->offset, gio->count);
                 break;
 	}
 
@@ -639,15 +676,16 @@ out:
 	GF_FREE (gio->iov);
 	GF_FREE (gio);
 	STACK_DESTROY (frame->root);
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return 0;
 }
 
 
 int
-glfs_preadv_async (struct glfs_fd *glfd, const struct iovec *iovec, int count,
-		   off_t offset, int flags, glfs_io_cbk fn, void *data)
+pub_glfs_preadv_async (struct glfs_fd *glfd, const struct iovec *iovec,
+                       int count, off_t offset, int flags, glfs_io_cbk fn,
+                       void *data)
 {
 	struct glfs_io *gio = NULL;
 	int             ret = 0;
@@ -658,7 +696,7 @@ glfs_preadv_async (struct glfs_fd *glfd, const struct iovec *iovec, int count,
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -718,7 +756,7 @@ out:
                 if (frame) {
                         STACK_DESTROY (frame->root);
                 }
-		glfs_subvol_done (fs, subvol);
+		priv_glfs_subvol_done (fs, subvol);
 	}
 
 	if (fd)
@@ -727,10 +765,12 @@ out:
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_preadv_async, 3.4.0);
+
 
 int
-glfs_read_async (struct glfs_fd *glfd, void *buf, size_t count, int flags,
-		 glfs_io_cbk fn, void *data)
+pub_glfs_read_async (struct glfs_fd *glfd, void *buf, size_t count, int flags,
+                     glfs_io_cbk fn, void *data)
 {
 	struct iovec iov = {0, };
 	ssize_t      ret = 0;
@@ -738,15 +778,17 @@ glfs_read_async (struct glfs_fd *glfd, void *buf, size_t count, int flags,
 	iov.iov_base = buf;
 	iov.iov_len = count;
 
-	ret = glfs_preadv_async (glfd, &iov, 1, glfd->offset, flags, fn, data);
+	ret = pub_glfs_preadv_async (glfd, &iov, 1, glfd->offset, flags, fn, data);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_read_async, 3.4.0);
+
 
 int
-glfs_pread_async (struct glfs_fd *glfd, void *buf, size_t count, off_t offset,
-		  int flags, glfs_io_cbk fn, void *data)
+pub_glfs_pread_async (struct glfs_fd *glfd, void *buf, size_t count,
+                      off_t offset, int flags, glfs_io_cbk fn, void *data)
 {
 	struct iovec iov = {0, };
 	ssize_t      ret = 0;
@@ -754,28 +796,31 @@ glfs_pread_async (struct glfs_fd *glfd, void *buf, size_t count, off_t offset,
 	iov.iov_base = buf;
 	iov.iov_len = count;
 
-	ret = glfs_preadv_async (glfd, &iov, 1, offset, flags, fn, data);
+	ret = pub_glfs_preadv_async (glfd, &iov, 1, offset, flags, fn, data);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_pread_async, 3.4.0);
+
 
 int
-glfs_readv_async (struct glfs_fd *glfd, const struct iovec *iov, int count,
-		  int flags, glfs_io_cbk fn, void *data)
+pub_glfs_readv_async (struct glfs_fd *glfd, const struct iovec *iov, int count,
+                      int flags, glfs_io_cbk fn, void *data)
 {
 	ssize_t      ret = 0;
 
-	ret = glfs_preadv_async (glfd, iov, count, glfd->offset, flags,
-				 fn, data);
+	ret = pub_glfs_preadv_async (glfd, iov, count, glfd->offset, flags,
+				  fn, data);
 	return ret;
 }
 
-///// writev /////
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_readv_async, 3.4.0);
+
 
 ssize_t
-glfs_pwritev (struct glfs_fd *glfd, const struct iovec *iovec, int iovcnt,
-	      off_t offset, int flags)
+pub_glfs_pwritev (struct glfs_fd *glfd, const struct iovec *iovec, int iovcnt,
+                  off_t offset, int flags)
 {
 	xlator_t       *subvol = NULL;
 	int             ret = -1;
@@ -787,7 +832,7 @@ glfs_pwritev (struct glfs_fd *glfd, const struct iovec *iovec, int iovcnt,
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -846,14 +891,16 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_pwritev, 3.4.0);
+
 
 ssize_t
-glfs_write (struct glfs_fd *glfd, const void *buf, size_t count, int flags)
+pub_glfs_write (struct glfs_fd *glfd, const void *buf, size_t count, int flags)
 {
 	struct iovec iov = {0, };
 	ssize_t      ret = 0;
@@ -861,28 +908,31 @@ glfs_write (struct glfs_fd *glfd, const void *buf, size_t count, int flags)
 	iov.iov_base = (void *) buf;
 	iov.iov_len = count;
 
-	ret = glfs_pwritev (glfd, &iov, 1, glfd->offset, flags);
+	ret = pub_glfs_pwritev (glfd, &iov, 1, glfd->offset, flags);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_write, 3.4.0);
 
 
 ssize_t
-glfs_writev (struct glfs_fd *glfd, const struct iovec *iov, int count,
-	     int flags)
+pub_glfs_writev (struct glfs_fd *glfd, const struct iovec *iov, int count,
+                 int flags)
 {
 	ssize_t      ret = 0;
 
-	ret = glfs_pwritev (glfd, iov, count, glfd->offset, flags);
+	ret = pub_glfs_pwritev (glfd, iov, count, glfd->offset, flags);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_writev, 3.4.0);
+
 
 ssize_t
-glfs_pwrite (struct glfs_fd *glfd, const void *buf, size_t count, off_t offset,
-	     int flags)
+pub_glfs_pwrite (struct glfs_fd *glfd, const void *buf, size_t count,
+                 off_t offset, int flags)
 {
 	struct iovec iov = {0, };
 	ssize_t      ret = 0;
@@ -890,15 +940,20 @@ glfs_pwrite (struct glfs_fd *glfd, const void *buf, size_t count, off_t offset,
 	iov.iov_base = (void *) buf;
 	iov.iov_len = count;
 
-	ret = glfs_pwritev (glfd, &iov, 1, offset, flags);
+	ret = pub_glfs_pwritev (glfd, &iov, 1, offset, flags);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_pwrite, 3.4.0);
+
+
+extern glfs_t *pub_glfs_from_glfd (glfs_fd_t *);
 
 int
-glfs_pwritev_async (struct glfs_fd *glfd, const struct iovec *iovec, int count,
-		    off_t offset, int flags, glfs_io_cbk fn, void *data)
+pub_glfs_pwritev_async (struct glfs_fd *glfd, const struct iovec *iovec,
+                        int count, off_t offset, int flags, glfs_io_cbk fn,
+                        void *data)
 {
 	struct glfs_io *gio = NULL;
 	int             ret = 0;
@@ -924,7 +979,7 @@ glfs_pwritev_async (struct glfs_fd *glfd, const struct iovec *iovec, int count,
 	gio->fn     = fn;
 	gio->data   = data;
 
-	ret = synctask_new (glfs_from_glfd (glfd)->ctx->env,
+	ret = synctask_new (pub_glfs_from_glfd (glfd)->ctx->env,
 			    glfs_io_async_task, glfs_io_async_cbk,
 			    NULL, gio);
 
@@ -936,10 +991,12 @@ glfs_pwritev_async (struct glfs_fd *glfd, const struct iovec *iovec, int count,
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_pwritev_async, 3.4.0);
+
 
 int
-glfs_write_async (struct glfs_fd *glfd, const void *buf, size_t count, int flags,
-		  glfs_io_cbk fn, void *data)
+pub_glfs_write_async (struct glfs_fd *glfd, const void *buf, size_t count,
+                      int flags, glfs_io_cbk fn, void *data)
 {
 	struct iovec iov = {0, };
 	ssize_t      ret = 0;
@@ -947,15 +1004,17 @@ glfs_write_async (struct glfs_fd *glfd, const void *buf, size_t count, int flags
 	iov.iov_base = (void *) buf;
 	iov.iov_len = count;
 
-	ret = glfs_pwritev_async (glfd, &iov, 1, glfd->offset, flags, fn, data);
+	ret = pub_glfs_pwritev_async (glfd, &iov, 1, glfd->offset, flags, fn, data);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_write_async, 3.4.0);
+
 
 int
-glfs_pwrite_async (struct glfs_fd *glfd, const void *buf, int count,
-		   off_t offset, int flags, glfs_io_cbk fn, void *data)
+pub_glfs_pwrite_async (struct glfs_fd *glfd, const void *buf, int count,
+                       off_t offset, int flags, glfs_io_cbk fn, void *data)
 {
 	struct iovec iov = {0, };
 	ssize_t      ret = 0;
@@ -963,26 +1022,30 @@ glfs_pwrite_async (struct glfs_fd *glfd, const void *buf, int count,
 	iov.iov_base = (void *) buf;
 	iov.iov_len = count;
 
-	ret = glfs_pwritev_async (glfd, &iov, 1, offset, flags, fn, data);
+	ret = pub_glfs_pwritev_async (glfd, &iov, 1, offset, flags, fn, data);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_pwrite_async, 3.4.0);
+
 
 int
-glfs_writev_async (struct glfs_fd *glfd, const struct iovec *iov, int count,
-		   int flags, glfs_io_cbk fn, void *data)
+pub_glfs_writev_async (struct glfs_fd *glfd, const struct iovec *iov, int count,
+                       int flags, glfs_io_cbk fn, void *data)
 {
 	ssize_t      ret = 0;
 
-	ret = glfs_pwritev_async (glfd, iov, count, glfd->offset, flags,
-				  fn, data);
+	ret = pub_glfs_pwritev_async (glfd, iov, count, glfd->offset, flags,
+				   fn, data);
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_writev_async, 3.4.0);
+
 
 int
-glfs_fsync (struct glfs_fd *glfd)
+pub_glfs_fsync (struct glfs_fd *glfd)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -990,7 +1053,7 @@ glfs_fsync (struct glfs_fd *glfd)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1009,11 +1072,13 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fsync, 3.4.0);
+
 
 static int
 glfs_fsync_async_common (struct glfs_fd *glfd, glfs_io_cbk fn, void *data,
@@ -1034,7 +1099,7 @@ glfs_fsync_async_common (struct glfs_fd *glfd, glfs_io_cbk fn, void *data,
 	gio->fn     = fn;
 	gio->data   = data;
 
-	ret = synctask_new (glfs_from_glfd (glfd)->ctx->env,
+	ret = synctask_new (pub_glfs_from_glfd (glfd)->ctx->env,
 			    glfs_io_async_task, glfs_io_async_cbk,
 			    NULL, gio);
 
@@ -1049,14 +1114,16 @@ glfs_fsync_async_common (struct glfs_fd *glfd, glfs_io_cbk fn, void *data,
 
 
 int
-glfs_fsync_async (struct glfs_fd *glfd, glfs_io_cbk fn, void *data)
+pub_glfs_fsync_async (struct glfs_fd *glfd, glfs_io_cbk fn, void *data)
 {
 	return glfs_fsync_async_common (glfd, fn, data, 0);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fsync_async, 3.4.0);
+
 
 int
-glfs_fdatasync (struct glfs_fd *glfd)
+pub_glfs_fdatasync (struct glfs_fd *glfd)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -1064,7 +1131,7 @@ glfs_fdatasync (struct glfs_fd *glfd)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1083,21 +1150,25 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fdatasync, 3.4.0);
+
 
 int
-glfs_fdatasync_async (struct glfs_fd *glfd, glfs_io_cbk fn, void *data)
+pub_glfs_fdatasync_async (struct glfs_fd *glfd, glfs_io_cbk fn, void *data)
 {
 	return glfs_fsync_async_common (glfd, fn, data, 1);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fdatasync_async, 3.4.0);
+
 
 int
-glfs_ftruncate (struct glfs_fd *glfd, off_t offset)
+pub_glfs_ftruncate (struct glfs_fd *glfd, off_t offset)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -1105,7 +1176,7 @@ glfs_ftruncate (struct glfs_fd *glfd, off_t offset)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1124,15 +1195,17 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_ftruncate, 3.4.0);
+
 
 int
-glfs_ftruncate_async (struct glfs_fd *glfd, off_t offset,
-		      glfs_io_cbk fn, void *data)
+pub_glfs_ftruncate_async (struct glfs_fd *glfd, off_t offset, glfs_io_cbk fn,
+                          void *data)
 {
 	struct glfs_io *gio = NULL;
 	int             ret = 0;
@@ -1149,7 +1222,7 @@ glfs_ftruncate_async (struct glfs_fd *glfd, off_t offset,
 	gio->fn     = fn;
 	gio->data   = data;
 
-	ret = synctask_new (glfs_from_glfd (glfd)->ctx->env,
+	ret = synctask_new (pub_glfs_from_glfd (glfd)->ctx->env,
 			    glfs_io_async_task, glfs_io_async_cbk,
 			    NULL, gio);
 
@@ -1161,9 +1234,11 @@ glfs_ftruncate_async (struct glfs_fd *glfd, off_t offset,
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_ftruncate_async, 3.4.0);
+
 
 int
-glfs_access (struct glfs *fs, const char *path, int mode)
+pub_glfs_access (struct glfs *fs, const char *path, int mode)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -1173,7 +1248,7 @@ glfs_access (struct glfs *fs, const char *path, int mode)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1193,14 +1268,16 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_access, 3.4.0);
+
 
 int
-glfs_symlink (struct glfs *fs, const char *data, const char *path)
+pub_glfs_symlink (struct glfs *fs, const char *data, const char *path)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -1212,7 +1289,7 @@ glfs_symlink (struct glfs *fs, const char *data, const char *path)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1274,14 +1351,16 @@ out:
 	if (xattr_req)
 		dict_unref (xattr_req);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_symlink, 3.4.0);
+
 
 int
-glfs_readlink (struct glfs *fs, const char *path, char *buf, size_t bufsiz)
+pub_glfs_readlink (struct glfs *fs, const char *path, char *buf, size_t bufsiz)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -1292,7 +1371,7 @@ glfs_readlink (struct glfs *fs, const char *path, char *buf, size_t bufsiz)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1322,14 +1401,16 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_readlink, 3.4.0);
+
 
 int
-glfs_mknod (struct glfs *fs, const char *path, mode_t mode, dev_t dev)
+pub_glfs_mknod (struct glfs *fs, const char *path, mode_t mode, dev_t dev)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -1341,7 +1422,7 @@ glfs_mknod (struct glfs *fs, const char *path, mode_t mode, dev_t dev)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1403,14 +1484,16 @@ out:
 	if (xattr_req)
 		dict_unref (xattr_req);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_mknod, 3.4.0);
+
 
 int
-glfs_mkdir (struct glfs *fs, const char *path, mode_t mode)
+pub_glfs_mkdir (struct glfs *fs, const char *path, mode_t mode)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -1422,7 +1505,7 @@ glfs_mkdir (struct glfs *fs, const char *path, mode_t mode)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1484,14 +1567,16 @@ out:
 	if (xattr_req)
 		dict_unref (xattr_req);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_mkdir, 3.4.0);
+
 
 int
-glfs_unlink (struct glfs *fs, const char *path)
+pub_glfs_unlink (struct glfs *fs, const char *path)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -1501,7 +1586,7 @@ glfs_unlink (struct glfs *fs, const char *path)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1530,14 +1615,16 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_unlink, 3.4.0);
+
 
 int
-glfs_rmdir (struct glfs *fs, const char *path)
+pub_glfs_rmdir (struct glfs *fs, const char *path)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -1547,7 +1634,7 @@ glfs_rmdir (struct glfs *fs, const char *path)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1576,14 +1663,16 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_rmdir, 3.4.0);
+
 
 int
-glfs_rename (struct glfs *fs, const char *oldpath, const char *newpath)
+pub_glfs_rename (struct glfs *fs, const char *oldpath, const char *newpath)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -1595,7 +1684,7 @@ glfs_rename (struct glfs *fs, const char *oldpath, const char *newpath)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1649,14 +1738,16 @@ out:
 	loc_wipe (&oldloc);
 	loc_wipe (&newloc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_rename, 3.4.0);
+
 
 int
-glfs_link (struct glfs *fs, const char *oldpath, const char *newpath)
+pub_glfs_link (struct glfs *fs, const char *oldpath, const char *newpath)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -1668,7 +1759,7 @@ glfs_link (struct glfs *fs, const char *oldpath, const char *newpath)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1722,14 +1813,16 @@ out:
 	loc_wipe (&oldloc);
 	loc_wipe (&newloc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_link, 3.4.0);
+
 
 struct glfs_fd *
-glfs_opendir (struct glfs *fs, const char *path)
+pub_glfs_opendir (struct glfs *fs, const char *path)
 {
 	int              ret = -1;
 	struct glfs_fd  *glfd = NULL;
@@ -1740,7 +1833,7 @@ glfs_opendir (struct glfs *fs, const char *path)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1795,14 +1888,16 @@ out:
 		glfs_fd_bind (glfd);
 	}
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return glfd;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_opendir, 3.4.0);
+
 
 int
-glfs_closedir (struct glfs_fd *glfd)
+pub_glfs_closedir (struct glfs_fd *glfd)
 {
 	__glfs_entry_fd (glfd);
 
@@ -1813,16 +1908,20 @@ glfs_closedir (struct glfs_fd *glfd)
 	return 0;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_closedir, 3.4.0);
+
 
 long
-glfs_telldir (struct glfs_fd *fd)
+pub_glfs_telldir (struct glfs_fd *fd)
 {
 	return fd->offset;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_telldir, 3.4.0);
+
 
 void
-glfs_seekdir (struct glfs_fd *fd, long offset)
+pub_glfs_seekdir (struct glfs_fd *fd, long offset)
 {
 	gf_dirent_t *entry = NULL;
 	gf_dirent_t *tmp = NULL;
@@ -1848,9 +1947,12 @@ glfs_seekdir (struct glfs_fd *fd, long offset)
 	*/
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_seekdir, 3.4.0);
+
+
 int
-glfs_discard_async (struct glfs_fd *glfd, off_t offset, size_t len,
-		      glfs_io_cbk fn, void *data)
+pub_glfs_discard_async (struct glfs_fd *glfd, off_t offset, size_t len,
+                        glfs_io_cbk fn, void *data)
 {
 	struct glfs_io *gio = NULL;
 	int             ret = 0;
@@ -1868,7 +1970,7 @@ glfs_discard_async (struct glfs_fd *glfd, off_t offset, size_t len,
 	gio->fn     = fn;
 	gio->data   = data;
 
-	ret = synctask_new (glfs_from_glfd (glfd)->ctx->env,
+	ret = synctask_new (pub_glfs_from_glfd (glfd)->ctx->env,
 			    glfs_io_async_task, glfs_io_async_cbk,
 			    NULL, gio);
 
@@ -1880,9 +1982,12 @@ glfs_discard_async (struct glfs_fd *glfd, off_t offset, size_t len,
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_discard_async, 3.5.0);
+
+
 int
-glfs_zerofill_async (struct glfs_fd *glfd, off_t offset, off_t len,
-                      glfs_io_cbk fn, void *data)
+pub_glfs_zerofill_async (struct glfs_fd *glfd, off_t offset, off_t len,
+                         glfs_io_cbk fn, void *data)
 {
         struct glfs_io *gio  = NULL;
         int             ret  = 0;
@@ -1900,7 +2005,7 @@ glfs_zerofill_async (struct glfs_fd *glfd, off_t offset, off_t len,
         gio->fn     = fn;
         gio->data   = data;
 
-        ret = synctask_new (glfs_from_glfd (glfd)->ctx->env,
+        ret = synctask_new (pub_glfs_from_glfd (glfd)->ctx->env,
                             glfs_io_async_task, glfs_io_async_cbk,
                             NULL, gio);
 
@@ -1912,6 +2017,8 @@ glfs_zerofill_async (struct glfs_fd *glfd, off_t offset, off_t len,
         return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_zerofill_async, 3.5.0);
+
 
 void
 gf_dirent_to_dirent (gf_dirent_t *gf_dirent, struct dirent *dirent)
@@ -1943,7 +2050,7 @@ glfd_entry_refresh (struct glfs_fd *glfd, int plus)
 	int              ret = -1;
 	fd_t            *fd = NULL;
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1991,7 +2098,7 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
@@ -2053,8 +2160,8 @@ unlock:
 
 
 int
-glfs_readdirplus_r (struct glfs_fd *glfd, struct stat *stat, struct dirent *ext,
-		    struct dirent **res)
+pub_glfs_readdirplus_r (struct glfs_fd *glfd, struct stat *stat,
+                        struct dirent *ext, struct dirent **res)
 {
 	int              ret = 0;
 	gf_dirent_t     *entry = NULL;
@@ -2094,38 +2201,46 @@ glfs_readdirplus_r (struct glfs_fd *glfd, struct stat *stat, struct dirent *ext,
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_readdirplus_r, 3.4.0);
+
 
 int
-glfs_readdir_r (struct glfs_fd *glfd, struct dirent *buf, struct dirent **res)
+pub_glfs_readdir_r (struct glfs_fd *glfd, struct dirent *buf,
+                    struct dirent **res)
 {
-	return glfs_readdirplus_r (glfd, 0, buf, res);
+	return pub_glfs_readdirplus_r (glfd, 0, buf, res);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_readdir_r, 3.4.0);
+
 
 struct dirent *
-glfs_readdirplus (struct glfs_fd *glfd, struct stat *stat)
+pub_glfs_readdirplus (struct glfs_fd *glfd, struct stat *stat)
 {
         struct dirent *res = NULL;
         int ret = -1;
 
-        ret = glfs_readdirplus_r (glfd, stat, NULL, &res);
+        ret = pub_glfs_readdirplus_r (glfd, stat, NULL, &res);
         if (ret)
                 return NULL;
 
         return res;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_readdirplus, 3.5.0);
 
 
 struct dirent *
-glfs_readdir (struct glfs_fd *glfd)
+pub_glfs_readdir (struct glfs_fd *glfd)
 {
-        return glfs_readdirplus (glfd, NULL);
+        return pub_glfs_readdirplus (glfd, NULL);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_readdir, 3.5.0);
+
 
 int
-glfs_statvfs (struct glfs *fs, const char *path, struct statvfs *buf)
+pub_glfs_statvfs (struct glfs *fs, const char *path, struct statvfs *buf)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -2135,7 +2250,7 @@ glfs_statvfs (struct glfs *fs, const char *path, struct statvfs *buf)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2155,11 +2270,13 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_statvfs, 3.4.0);
+
 
 int
 glfs_setattr (struct glfs *fs, const char *path, struct iatt *iatt,
@@ -2173,7 +2290,7 @@ glfs_setattr (struct glfs *fs, const char *path, struct iatt *iatt,
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2196,7 +2313,7 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
@@ -2211,7 +2328,7 @@ glfs_fsetattr (struct glfs_fd *glfd, struct iatt *iatt, int valid)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2230,14 +2347,14 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
 
 int
-glfs_chmod (struct glfs *fs, const char *path, mode_t mode)
+pub_glfs_chmod (struct glfs *fs, const char *path, mode_t mode)
 {
 	int              ret = -1;
 	struct iatt      iatt = {0, };
@@ -2251,9 +2368,11 @@ glfs_chmod (struct glfs *fs, const char *path, mode_t mode)
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_chmod, 3.4.0);
+
 
 int
-glfs_fchmod (struct glfs_fd *glfd, mode_t mode)
+pub_glfs_fchmod (struct glfs_fd *glfd, mode_t mode)
 {
 	int              ret = -1;
 	struct iatt      iatt = {0, };
@@ -2267,9 +2386,11 @@ glfs_fchmod (struct glfs_fd *glfd, mode_t mode)
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fchmod, 3.4.0);
+
 
 int
-glfs_chown (struct glfs *fs, const char *path, uid_t uid, gid_t gid)
+pub_glfs_chown (struct glfs *fs, const char *path, uid_t uid, gid_t gid)
 {
 	int              ret = -1;
 	int              valid = 0;
@@ -2284,9 +2405,11 @@ glfs_chown (struct glfs *fs, const char *path, uid_t uid, gid_t gid)
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_chown, 3.4.0);
+
 
 int
-glfs_lchown (struct glfs *fs, const char *path, uid_t uid, gid_t gid)
+pub_glfs_lchown (struct glfs *fs, const char *path, uid_t uid, gid_t gid)
 {
 	int              ret = -1;
 	int              valid = 0;
@@ -2301,9 +2424,11 @@ glfs_lchown (struct glfs *fs, const char *path, uid_t uid, gid_t gid)
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_lchown, 3.4.0);
+
 
 int
-glfs_fchown (struct glfs_fd *glfd, uid_t uid, gid_t gid)
+pub_glfs_fchown (struct glfs_fd *glfd, uid_t uid, gid_t gid)
 {
 	int              ret = -1;
 	int              valid = 0;
@@ -2318,9 +2443,11 @@ glfs_fchown (struct glfs_fd *glfd, uid_t uid, gid_t gid)
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fchown, 3.4.0);
+
 
 int
-glfs_utimens (struct glfs *fs, const char *path, struct timespec times[2])
+pub_glfs_utimens (struct glfs *fs, const char *path, struct timespec times[2])
 {
 	int              ret = -1;
 	int              valid = 0;
@@ -2338,9 +2465,11 @@ glfs_utimens (struct glfs *fs, const char *path, struct timespec times[2])
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_utimens, 3.4.0);
+
 
 int
-glfs_lutimens (struct glfs *fs, const char *path, struct timespec times[2])
+pub_glfs_lutimens (struct glfs *fs, const char *path, struct timespec times[2])
 {
 	int              ret = -1;
 	int              valid = 0;
@@ -2358,9 +2487,11 @@ glfs_lutimens (struct glfs *fs, const char *path, struct timespec times[2])
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_lutimens, 3.4.0);
+
 
 int
-glfs_futimens (struct glfs_fd *glfd, struct timespec times[2])
+pub_glfs_futimens (struct glfs_fd *glfd, struct timespec times[2])
 {
 	int              ret = -1;
 	int              valid = 0;
@@ -2378,6 +2509,8 @@ glfs_futimens (struct glfs_fd *glfd, struct timespec times[2])
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_futimens, 3.4.0);
+
 
 int
 glfs_getxattr_process (void *value, size_t size, dict_t *xattr,
@@ -2424,7 +2557,7 @@ glfs_getxattr_common (struct glfs *fs, const char *path, const char *name,
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2452,31 +2585,35 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
 
 ssize_t
-glfs_getxattr (struct glfs *fs, const char *path, const char *name,
-	       void *value, size_t size)
+pub_glfs_getxattr (struct glfs *fs, const char *path, const char *name,
+                   void *value, size_t size)
 {
 	return glfs_getxattr_common (fs, path, name, value, size, 1);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_getxattr, 3.4.0);
+
 
 ssize_t
-glfs_lgetxattr (struct glfs *fs, const char *path, const char *name,
-		void *value, size_t size)
+pub_glfs_lgetxattr (struct glfs *fs, const char *path, const char *name,
+                    void *value, size_t size)
 {
 	return glfs_getxattr_common (fs, path, name, value, size, 0);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_lgetxattr, 3.4.0);
+
 
 ssize_t
-glfs_fgetxattr (struct glfs_fd *glfd, const char *name, void *value,
-		size_t size)
+pub_glfs_fgetxattr (struct glfs_fd *glfd, const char *name, void *value,
+                    size_t size)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -2485,7 +2622,7 @@ glfs_fgetxattr (struct glfs_fd *glfd, const char *name, void *value,
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2508,11 +2645,13 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fgetxattr, 3.4.0);
+
 
 int
 glfs_listxattr_process (void *value, size_t size, dict_t *xattr)
@@ -2551,7 +2690,7 @@ glfs_listxattr_common (struct glfs *fs, const char *path, void *value,
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2580,28 +2719,32 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
 
 ssize_t
-glfs_listxattr (struct glfs *fs, const char *path, void *value, size_t size)
+pub_glfs_listxattr (struct glfs *fs, const char *path, void *value, size_t size)
 {
 	return glfs_listxattr_common (fs, path, value, size, 1);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_listxattr, 3.4.0);
+
 
 ssize_t
-glfs_llistxattr (struct glfs *fs, const char *path, void *value, size_t size)
+pub_glfs_llistxattr (struct glfs *fs, const char *path, void *value, size_t size)
 {
 	return glfs_listxattr_common (fs, path, value, size, 0);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_llistxattr, 3.4.0);
+
 
 ssize_t
-glfs_flistxattr (struct glfs_fd *glfd, void *value, size_t size)
+pub_glfs_flistxattr (struct glfs_fd *glfd, void *value, size_t size)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -2610,7 +2753,7 @@ glfs_flistxattr (struct glfs_fd *glfd, void *value, size_t size)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2633,11 +2776,13 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_flistxattr, 3.4.0);
+
 
 dict_t *
 dict_for_key_value (const char *name, const char *value, size_t size)
@@ -2672,7 +2817,7 @@ glfs_setxattr_common (struct glfs *fs, const char *path, const char *name,
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2705,31 +2850,35 @@ out:
 	if (xattr)
 		dict_unref (xattr);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
 
 int
-glfs_setxattr (struct glfs *fs, const char *path, const char *name,
-	       const void *value, size_t size, int flags)
+pub_glfs_setxattr (struct glfs *fs, const char *path, const char *name,
+                   const void *value, size_t size, int flags)
 {
 	return glfs_setxattr_common (fs, path, name, value, size, flags, 1);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_setxattr, 3.4.0);
+
 
 int
-glfs_lsetxattr (struct glfs *fs, const char *path, const char *name,
-		const void *value, size_t size, int flags)
+pub_glfs_lsetxattr (struct glfs *fs, const char *path, const char *name,
+                    const void *value, size_t size, int flags)
 {
 	return glfs_setxattr_common (fs, path, name, value, size, flags, 0);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_lsetxattr, 3.4.0);
+
 
 int
-glfs_fsetxattr (struct glfs_fd *glfd, const char *name, const void *value,
-		size_t size, int flags)
+pub_glfs_fsetxattr (struct glfs_fd *glfd, const char *name, const void *value,
+                    size_t size, int flags)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -2738,7 +2887,7 @@ glfs_fsetxattr (struct glfs_fd *glfd, const char *name, const void *value,
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2767,11 +2916,13 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fsetxattr, 3.4.0);
+
 
 int
 glfs_removexattr_common (struct glfs *fs, const char *path, const char *name,
@@ -2785,7 +2936,7 @@ glfs_removexattr_common (struct glfs *fs, const char *path, const char *name,
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2809,28 +2960,32 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
 
 int
-glfs_removexattr (struct glfs *fs, const char *path, const char *name)
+pub_glfs_removexattr (struct glfs *fs, const char *path, const char *name)
 {
 	return glfs_removexattr_common (fs, path, name, 1);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_removexattr, 3.4.0);
+
 
 int
-glfs_lremovexattr (struct glfs *fs, const char *path, const char *name)
+pub_glfs_lremovexattr (struct glfs *fs, const char *path, const char *name)
 {
 	return glfs_removexattr_common (fs, path, name, 0);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_lremovexattr, 3.4.0);
+
 
 int
-glfs_fremovexattr (struct glfs_fd *glfd, const char *name)
+pub_glfs_fremovexattr (struct glfs_fd *glfd, const char *name)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -2838,7 +2993,7 @@ glfs_fremovexattr (struct glfs_fd *glfd, const char *name)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2857,14 +3012,16 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fremovexattr, 3.4.0);
+
 
 int
-glfs_fallocate (struct glfs_fd *glfd, int keep_size, off_t offset, size_t len)
+pub_glfs_fallocate (struct glfs_fd *glfd, int keep_size, off_t offset, size_t len)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -2872,7 +3029,7 @@ glfs_fallocate (struct glfs_fd *glfd, int keep_size, off_t offset, size_t len)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2891,14 +3048,16 @@ out:
 	if (fd)
 		fd_unref(fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fallocate, 3.5.0);
+
 
 int
-glfs_discard (struct glfs_fd *glfd, off_t offset, size_t len)
+pub_glfs_discard (struct glfs_fd *glfd, off_t offset, size_t len)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -2906,7 +3065,7 @@ glfs_discard (struct glfs_fd *glfd, off_t offset, size_t len)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2925,13 +3084,16 @@ out:
 	if (fd)
 		fd_unref(fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_discard, 3.5.0);
+
+
 int
-glfs_zerofill (struct glfs_fd *glfd, off_t offset, off_t len)
+pub_glfs_zerofill (struct glfs_fd *glfd, off_t offset, off_t len)
 {
         int               ret             = -1;
         xlator_t         *subvol          = NULL;
@@ -2939,7 +3101,7 @@ glfs_zerofill (struct glfs_fd *glfd, off_t offset, off_t len)
 
         __glfs_entry_fd (glfd);
 
-        subvol = glfs_active_subvol (glfd->fs);
+        subvol = priv_glfs_active_subvol (glfd->fs);
         if (!subvol) {
                 errno = EIO;
                 goto out;
@@ -2956,13 +3118,16 @@ out:
         if (fd)
                 fd_unref(fd);
 
-        glfs_subvol_done (glfd->fs, subvol);
+        priv_glfs_subvol_done (glfd->fs, subvol);
 
         return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_zerofill, 3.5.0);
+
+
 int
-glfs_chdir (struct glfs *fs, const char *path)
+pub_glfs_chdir (struct glfs *fs, const char *path)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -2972,7 +3137,7 @@ glfs_chdir (struct glfs *fs, const char *path)
 
 	__glfs_entry_fs (fs);
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -2997,14 +3162,16 @@ retry:
 out:
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_chdir, 3.4.0);
+
 
 int
-glfs_fchdir (struct glfs_fd *glfd)
+pub_glfs_fchdir (struct glfs_fd *glfd)
 {
 	int       ret = -1;
 	inode_t  *inode = NULL;
@@ -3013,7 +3180,7 @@ glfs_fchdir (struct glfs_fd *glfd)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -3041,14 +3208,16 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fchdir, 3.4.0);
+
 
 char *
-glfs_realpath (struct glfs *fs, const char *path, char *resolved_path)
+pub_glfs_realpath (struct glfs *fs, const char *path, char *resolved_path)
 {
 	int              ret = -1;
 	char            *retpath = NULL;
@@ -3071,7 +3240,7 @@ glfs_realpath (struct glfs *fs, const char *path, char *resolved_path)
 		goto out;
 	}
 
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -3099,14 +3268,16 @@ out:
 		retpath = NULL;
 	}
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return retpath;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_realpath, 3.4.0);
+
 
 char *
-glfs_getcwd (struct glfs *fs, char *buf, size_t n)
+pub_glfs_getcwd (struct glfs *fs, char *buf, size_t n)
 {
 	int              ret = -1;
 	inode_t         *inode = NULL;
@@ -3149,6 +3320,8 @@ out:
 	return buf;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_getcwd, 3.4.0);
+
 
 static void
 gf_flock_to_flock (struct gf_flock *gf_flock, struct flock *flock)
@@ -3173,7 +3346,7 @@ gf_flock_from_flock (struct gf_flock *gf_flock, struct flock *flock)
 
 
 int
-glfs_posix_lock (struct glfs_fd *glfd, int cmd, struct flock *flock)
+pub_glfs_posix_lock (struct glfs_fd *glfd, int cmd, struct flock *flock)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -3183,7 +3356,7 @@ glfs_posix_lock (struct glfs_fd *glfd, int cmd, struct flock *flock)
 
 	__glfs_entry_fd (glfd);
 
-	subvol = glfs_active_subvol (glfd->fs);
+	subvol = priv_glfs_active_subvol (glfd->fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -3208,14 +3381,16 @@ out:
 	if (fd)
 		fd_unref (fd);
 
-	glfs_subvol_done (glfd->fs, subvol);
+	priv_glfs_subvol_done (glfd->fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_posix_lock, 3.4.0);
+
 
 struct glfs_fd *
-glfs_dup (struct glfs_fd *glfd)
+pub_glfs_dup (struct glfs_fd *glfd)
 {
 	xlator_t  *subvol = NULL;
 	fd_t      *fd = NULL;
@@ -3225,7 +3400,7 @@ glfs_dup (struct glfs_fd *glfd)
 	__glfs_entry_fd (glfd);
 
 	fs = glfd->fs;
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		errno = EIO;
 		goto out;
@@ -3250,7 +3425,10 @@ out:
 	if (dupfd)
 		glfs_fd_bind (dupfd);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return dupfd;
 }
+
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_dup, 3.4.0);
+
diff --git a/api/src/glfs-handleops.c b/api/src/glfs-handleops.c
index 0538ac6..35cb0c8 100644
--- a/api/src/glfs-handleops.c
+++ b/api/src/glfs-handleops.c
@@ -58,7 +58,7 @@ glfs_iatt_from_stat (struct stat *stat, int valid, struct iatt *iatt,
 }
 
 struct glfs_object *
-glfs_h_lookupat (struct glfs *fs, struct glfs_object *parent,
+pub_glfs_h_lookupat (struct glfs *fs, struct glfs_object *parent,
 		 const char *path, struct stat *stat)
 {
 	int                      ret = 0;
@@ -77,7 +77,7 @@ glfs_h_lookupat (struct glfs *fs, struct glfs_object *parent,
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		errno = EIO;
 		goto out;
@@ -93,7 +93,7 @@ glfs_h_lookupat (struct glfs *fs, struct glfs_object *parent,
 	}
 
 	/* fop/op */
-	ret = glfs_resolve_at (fs, subvol, inode, path, &loc, &iatt,
+	ret = priv_glfs_resolve_at (fs, subvol, inode, path, &loc, &iatt,
 			       0 /*TODO: links? */, 0);
 
 	/* populate out args */
@@ -110,13 +110,16 @@ out:
 	if (inode)
 		inode_unref (inode);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return object;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_lookupat, 3.4.2);
+
+
 int
-glfs_h_stat (struct glfs *fs, struct glfs_object *object, struct stat *stat)
+pub_glfs_h_stat (struct glfs *fs, struct glfs_object *object, struct stat *stat)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -133,7 +136,7 @@ glfs_h_stat (struct glfs *fs, struct glfs_object *object, struct stat *stat)
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -163,13 +166,16 @@ out:
 	if (inode)
 		inode_unref (inode);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_stat, 3.4.2);
+
+
 int
-glfs_h_getattrs (struct glfs *fs, struct glfs_object *object, struct stat *stat)
+pub_glfs_h_getattrs (struct glfs *fs, struct glfs_object *object, struct stat *stat)
 {
 	int                      ret = 0;
 	xlator_t                *subvol = NULL;
@@ -185,7 +191,7 @@ glfs_h_getattrs (struct glfs *fs, struct glfs_object *object, struct stat *stat)
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -211,14 +217,17 @@ out:
 	if (inode)
 		inode_unref (inode);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_getattrs, 3.4.2);
+
+
 int
-glfs_h_getxattrs (struct glfs *fs, struct glfs_object *object, const char *name,
-                  void *value, size_t size)
+pub_glfs_h_getxattrs (struct glfs *fs, struct glfs_object *object,
+                      const char *name, void *value, size_t size)
 {
         int             ret = 0;
         xlator_t        *subvol = NULL;
@@ -235,7 +244,7 @@ glfs_h_getxattrs (struct glfs *fs, struct glfs_object *object, const char *name,
         __glfs_entry_fs (fs);
 
         /* get the active volume */
-        subvol = glfs_active_subvol (fs);
+        subvol = priv_glfs_active_subvol (fs);
         if (!subvol) {
                 ret = -1;
                 errno = EIO;
@@ -265,14 +274,17 @@ out:
         if (inode)
                 inode_unref (inode);
 
-        glfs_subvol_done (fs, subvol);
+        priv_glfs_subvol_done (fs, subvol);
 
         return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_getxattrs, 3.5.1);
+
+
 int
-glfs_h_setattrs (struct glfs *fs, struct glfs_object *object, struct stat *stat,
-		 int valid)
+pub_glfs_h_setattrs (struct glfs *fs, struct glfs_object *object,
+                     struct stat *stat, int valid)
 {
 	int              ret = -1;
 	xlator_t        *subvol = NULL;
@@ -290,7 +302,7 @@ glfs_h_setattrs (struct glfs *fs, struct glfs_object *object, struct stat *stat,
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -318,14 +330,17 @@ out:
 	if (inode)
 		inode_unref (inode);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_setattrs, 3.4.2);
+
+
 int
-glfs_h_setxattrs (struct glfs *fs, struct glfs_object *object, const char *name,
-                  const void *value, size_t size, int flags)
+pub_glfs_h_setxattrs (struct glfs *fs, struct glfs_object *object,
+                      const char *name, const void *value, size_t size, int flags)
 {
         int              ret = -1;
         xlator_t        *subvol = NULL;
@@ -343,7 +358,7 @@ glfs_h_setxattrs (struct glfs *fs, struct glfs_object *object, const char *name,
         __glfs_entry_fs (fs);
 
         /* get the active volume */
-        subvol = glfs_active_subvol (fs);
+        subvol = priv_glfs_active_subvol (fs);
         if (!subvol) {
                 ret = -1;
                 errno = EIO;
@@ -379,13 +394,16 @@ out:
         if (xattr)
                 dict_unref (xattr);
 
-        glfs_subvol_done (fs, subvol);
+        priv_glfs_subvol_done (fs, subvol);
 
         return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_setxattrs, 3.5.0);
+
+
 int
-glfs_h_removexattrs (struct glfs *fs, struct glfs_object *object, const char *name)
+pub_glfs_h_removexattrs (struct glfs *fs, struct glfs_object *object, const char *name)
 {
         int              ret = -1;
         xlator_t        *subvol = NULL;
@@ -401,7 +419,7 @@ glfs_h_removexattrs (struct glfs *fs, struct glfs_object *object, const char *na
         __glfs_entry_fs (fs);
 
         /* get the active volume */
-        subvol = glfs_active_subvol (fs);
+        subvol = priv_glfs_active_subvol (fs);
         if (!subvol) {
                 ret = -1;
                 errno = EIO;
@@ -427,13 +445,16 @@ out:
         if (inode)
                 inode_unref (inode);
 
-        glfs_subvol_done (fs, subvol);
+        priv_glfs_subvol_done (fs, subvol);
 
         return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_removexattrs, 3.5.1);
+
+
 struct glfs_fd *
-glfs_h_open (struct glfs *fs, struct glfs_object *object, int flags)
+pub_glfs_h_open (struct glfs *fs, struct glfs_object *object, int flags)
 {
 	int              ret = -1;
 	struct glfs_fd  *glfd = NULL;
@@ -450,7 +471,7 @@ glfs_h_open (struct glfs *fs, struct glfs_object *object, int flags)
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		errno = EIO;
 		goto out;
@@ -510,14 +531,17 @@ out:
 		glfs_fd_bind (glfd);
 	}
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return glfd;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_open, 3.4.2);
+
+
 struct glfs_object *
-glfs_h_creat (struct glfs *fs, struct glfs_object *parent, const char *path,
-	      int flags, mode_t mode, struct stat *stat)
+pub_glfs_h_creat (struct glfs *fs, struct glfs_object *parent, const char *path,
+	          int flags, mode_t mode, struct stat *stat)
 {
 	int                 ret = -1;
 	struct glfs_fd     *glfd = NULL;
@@ -538,7 +562,7 @@ glfs_h_creat (struct glfs *fs, struct glfs_object *parent, const char *path,
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -621,13 +645,16 @@ out:
 		glfd = NULL;
 	}
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return object;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_creat, 3.4.2);
+
+
 struct glfs_object *
-glfs_h_mkdir (struct glfs *fs, struct glfs_object *parent, const char *path,
+pub_glfs_h_mkdir (struct glfs *fs, struct glfs_object *parent, const char *path,
 	      mode_t mode, struct stat *stat)
 {
 	int                 ret = -1;
@@ -648,7 +675,7 @@ glfs_h_mkdir (struct glfs *fs, struct glfs_object *parent, const char *path,
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -709,13 +736,16 @@ out:
 	if (xattr_req)
 		dict_unref (xattr_req);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return object;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_mkdir, 3.4.2);
+
+
 struct glfs_object *
-glfs_h_mknod (struct glfs *fs, struct glfs_object *parent, const char *path,
+pub_glfs_h_mknod (struct glfs *fs, struct glfs_object *parent, const char *path,
 	      mode_t mode, dev_t dev, struct stat *stat)
 {
 	int                 ret = -1;
@@ -736,7 +766,7 @@ glfs_h_mknod (struct glfs *fs, struct glfs_object *parent, const char *path,
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -796,13 +826,16 @@ out:
 	if (xattr_req)
 		dict_unref (xattr_req);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return object;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_mknod, 3.4.2);
+
+
 int
-glfs_h_unlink (struct glfs *fs, struct glfs_object *parent, const char *path)
+pub_glfs_h_unlink (struct glfs *fs, struct glfs_object *parent, const char *path)
 {
 	int                 ret = -1;
 	xlator_t           *subvol = NULL;
@@ -818,7 +851,7 @@ glfs_h_unlink (struct glfs *fs, struct glfs_object *parent, const char *path)
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if ( !subvol ) {
 		ret = -1;
 		errno = EIO;
@@ -832,7 +865,7 @@ glfs_h_unlink (struct glfs *fs, struct glfs_object *parent, const char *path)
 		goto out;
 	}
 
-	ret = glfs_resolve_at (fs, subvol, inode, path, &loc, NULL, 0 , 0);
+	ret = priv_glfs_resolve_at (fs, subvol, inode, path, &loc, NULL, 0 , 0);
 	if (ret != 0) {
 		goto out;
 	}
@@ -858,13 +891,16 @@ out:
 	if (inode)
 		inode_unref (inode);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_unlink, 3.4.2);
+
+
 struct glfs_fd *
-glfs_h_opendir (struct glfs *fs, struct glfs_object *object)
+pub_glfs_h_opendir (struct glfs *fs, struct glfs_object *object)
 {
 	int              ret = -1;
 	struct glfs_fd  *glfd = NULL;
@@ -881,7 +917,7 @@ glfs_h_opendir (struct glfs *fs, struct glfs_object *object)
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -933,13 +969,16 @@ out:
 		glfs_fd_bind (glfd);
 	}
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return glfd;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_opendir, 3.4.2);
+
+
 ssize_t
-glfs_h_extract_handle (struct glfs_object *object, unsigned char *handle,
+pub_glfs_h_extract_handle (struct glfs_object *object, unsigned char *handle,
 		       int len)
 {
 	ssize_t ret = -1;
@@ -969,8 +1008,11 @@ out:
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_extract_handle, 3.4.2);
+
+
 struct glfs_object *
-glfs_h_create_from_handle (struct glfs *fs, unsigned char *handle, int len,
+pub_glfs_h_create_from_handle (struct glfs *fs, unsigned char *handle, int len,
 			   struct stat *stat)
 {
 	loc_t               loc = {0, };
@@ -989,7 +1031,7 @@ glfs_h_create_from_handle (struct glfs *fs, unsigned char *handle, int len,
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		errno = EIO;
 		goto out;
@@ -1047,13 +1089,16 @@ out:
 	/* TODO: Check where the inode ref is being held? */
 	loc_wipe (&loc);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return object;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_create_from_handle, 3.4.2);
+
+
 int
-glfs_h_close (struct glfs_object *object)
+pub_glfs_h_close (struct glfs_object *object)
 {
 	/* Release the held reference */
 	inode_unref (object->inode);
@@ -1062,8 +1107,11 @@ glfs_h_close (struct glfs_object *object)
 	return 0;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_close, 3.4.2);
+
+
 int
-glfs_h_truncate (struct glfs *fs, struct glfs_object *object, off_t offset)
+pub_glfs_h_truncate (struct glfs *fs, struct glfs_object *object, off_t offset)
 {
 	loc_t               loc = {0, };
 	int                 ret = -1;
@@ -1079,7 +1127,7 @@ glfs_h_truncate (struct glfs *fs, struct glfs_object *object, off_t offset)
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1108,13 +1156,16 @@ out:
 	if (inode)
 		inode_unref (inode);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_truncate, 3.4.2);
+
+
 struct glfs_object *
-glfs_h_symlink (struct glfs *fs, struct glfs_object *parent, const char *name,
+pub_glfs_h_symlink (struct glfs *fs, struct glfs_object *parent, const char *name,
 		const char *data, struct stat *stat)
 {
 	int                 ret = -1;
@@ -1136,7 +1187,7 @@ glfs_h_symlink (struct glfs *fs, struct glfs_object *parent, const char *name,
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1202,13 +1253,16 @@ out:
 	if (xattr_req)
 		dict_unref (xattr_req);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return object;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_symlink, 3.4.2);
+
+
 int
-glfs_h_readlink (struct glfs *fs, struct glfs_object *object, char *buf,
+pub_glfs_h_readlink (struct glfs *fs, struct glfs_object *object, char *buf,
 		 size_t bufsiz)
 {
 	loc_t               loc = {0, };
@@ -1226,7 +1280,7 @@ glfs_h_readlink (struct glfs *fs, struct glfs_object *object, char *buf,
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1258,13 +1312,16 @@ out:
 	if (linkval)
 		GF_FREE (linkval);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_readlink, 3.4.2);
+
+
 int
-glfs_h_link (struct glfs *fs, struct glfs_object *linksrc,
+pub_glfs_h_link (struct glfs *fs, struct glfs_object *linksrc,
 	     struct glfs_object *parent, const char *name)
 {
 	int                 ret = -1;
@@ -1284,7 +1341,7 @@ glfs_h_link (struct glfs *fs, struct glfs_object *linksrc,
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if (!subvol) {
 		ret = -1;
 		errno = EIO;
@@ -1316,7 +1373,7 @@ glfs_h_link (struct glfs *fs, struct glfs_object *linksrc,
 	/* setup newloc based on parent */
 	newloc.parent = inode_ref (pinode);
 	newloc.name = name;
-	ret = glfs_loc_touchup (&newloc);
+	ret = priv_glfs_loc_touchup (&newloc);
 	if (ret != 0) {
 		errno = EINVAL;
 		goto out;
@@ -1343,13 +1400,16 @@ out:
 	if (pinode)
 		inode_unref (pinode);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_link, 3.4.2);
+
+
 int
-glfs_h_rename (struct glfs *fs, struct glfs_object *olddir, const char *oldname,
+pub_glfs_h_rename (struct glfs *fs, struct glfs_object *olddir, const char *oldname,
 	       struct glfs_object *newdir, const char *newname)
 {
 	int                 ret = -1;
@@ -1371,7 +1431,7 @@ glfs_h_rename (struct glfs *fs, struct glfs_object *olddir, const char *oldname,
 	__glfs_entry_fs (fs);
 
 	/* get the active volume */
-	subvol = glfs_active_subvol (fs);
+	subvol = priv_glfs_active_subvol (fs);
 	if ( !subvol ) {
 		ret = -1;
 		errno = EIO;
@@ -1385,7 +1445,7 @@ glfs_h_rename (struct glfs *fs, struct glfs_object *olddir, const char *oldname,
 		goto out;
 	}
 
-	ret = glfs_resolve_at (fs, subvol, oldpinode, oldname, &oldloc,
+	ret = priv_glfs_resolve_at (fs, subvol, oldpinode, oldname, &oldloc,
 			       &oldiatt, 0 , 0);
 	if (ret != 0) {
 		goto out;
@@ -1398,7 +1458,7 @@ glfs_h_rename (struct glfs *fs, struct glfs_object *olddir, const char *oldname,
 		goto out;
 	}
 
-	ret = glfs_resolve_at (fs, subvol, newpinode, newname, &newloc,
+	ret = priv_glfs_resolve_at (fs, subvol, newpinode, newname, &newloc,
 			       &newiatt, 0, 0);
 
 	if (ret && errno != ENOENT && newloc.parent)
@@ -1435,7 +1495,10 @@ out:
 	if (newpinode)
 		inode_unref (newpinode);
 
-	glfs_subvol_done (fs, subvol);
+	priv_glfs_subvol_done (fs, subvol);
 
 	return ret;
 }
+
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_h_rename, 3.4.2);
+
diff --git a/api/src/glfs-internal.h b/api/src/glfs-internal.h
index 976c958..6b4b0cb 100644
--- a/api/src/glfs-internal.h
+++ b/api/src/glfs-internal.h
@@ -31,7 +31,7 @@
 #define GLFS_LOC_FILL_INODE(oinode, loc, label) do {   \
 	loc.inode = inode_ref (oinode);                \
 	uuid_copy (loc.gfid, oinode->gfid);            \
-	ret = glfs_loc_touchup (&loc);                 \
+	ret = priv_glfs_loc_touchup (&loc);            \
 	if (ret != 0) {                                \
 		errno = EINVAL;                        \
 		goto label;                            \
@@ -47,7 +47,7 @@
 	}                                                                 \
 	loc.parent = inode_ref (pinode);                                  \
 	loc.name = path;                                                  \
-	ret = glfs_loc_touchup (&loc);                                    \
+	ret = priv_glfs_loc_touchup (&loc);                               \
 	if (ret != 0) {                                                   \
 		errno = EINVAL;                                           \
 		goto label;                                               \
@@ -113,7 +113,7 @@ struct glfs_object {
 #define GF_MEMPOOL_COUNT_OF_DATA_PAIR_T   (GF_MEMPOOL_COUNT_OF_DICT_T * 4)
 
 int glfs_mgmt_init (struct glfs *fs);
-void glfs_init_done (struct glfs *fs, int ret);
+void priv_glfs_init_done (struct glfs *fs, int ret);
 int glfs_process_volfp (struct glfs *fs, FILE *fp);
 int glfs_resolve (struct glfs *fs, xlator_t *subvol, const char *path, loc_t *loc,
 		  struct iatt *iatt, int reval);
@@ -175,11 +175,11 @@ void glfs_fd_destroy (struct glfs_fd *glfd);
 struct glfs_fd *glfs_fd_new (struct glfs *fs);
 void glfs_fd_bind (struct glfs_fd *glfd);
 
-xlator_t * glfs_active_subvol (struct glfs *fs);
-xlator_t * __glfs_active_subvol (struct glfs *fs);
-void glfs_subvol_done (struct glfs *fs, xlator_t *subvol);
+xlator_t *priv_glfs_active_subvol (struct glfs *fs);
+xlator_t *__glfs_active_subvol (struct glfs *fs);
+void priv_glfs_subvol_done (struct glfs *fs, xlator_t *subvol);
 
-inode_t * glfs_refresh_inode (xlator_t *subvol, inode_t *inode);
+inode_t *glfs_refresh_inode (xlator_t *subvol, inode_t *inode);
 
 inode_t *glfs_cwd_get (struct glfs *fs);
 int glfs_cwd_set (struct glfs *fs, inode_t *inode);
@@ -190,10 +190,10 @@ int __glfs_cwd_set (struct glfs *fs, inode_t *inode);
 
 int glfs_resolve_base (struct glfs *fs, xlator_t *subvol, inode_t *inode,
 		       struct iatt *iatt);
-int glfs_resolve_at (struct glfs *fs, xlator_t *subvol, inode_t *at,
+int priv_glfs_resolve_at (struct glfs *fs, xlator_t *subvol, inode_t *at,
                      const char *origpath, loc_t *loc, struct iatt *iatt,
                      int follow, int reval);
-int glfs_loc_touchup (loc_t *loc);
+int priv_glfs_loc_touchup (loc_t *loc);
 void glfs_iatt_to_stat (struct glfs *fs, struct iatt *iatt, struct stat *stat);
 int glfs_loc_link (loc_t *loc, struct iatt *iatt);
 int glfs_loc_unlink (loc_t *loc);
@@ -204,4 +204,11 @@ int glfs_getxattr_process (void *value, size_t size, dict_t *xattr,
 /* Sends RPC call to glusterd to fetch required volume info */
 int glfs_get_volume_info (struct glfs *fs);
 
+#define GFAPI_SYMVER_PUBLIC_DEFAULT(fn, dotver) \
+        asm(".symver pub_"STR(fn)", "STR(fn)"@@GFAPI_"STR(dotver))
+
+#define GFAPI_SYMVER_PRIVATE_DEFAULT(fn, dotver) \
+        asm(".symver priv_"STR(fn)", "STR(fn)"@@GFAPI_PRIVATE_"STR(dotver))
+#define STR(str) #str
+
 #endif /* !_GLFS_INTERNAL_H */
diff --git a/api/src/glfs-master.c b/api/src/glfs-master.c
index c02534c..89017ba 100644
--- a/api/src/glfs-master.c
+++ b/api/src/glfs-master.c
@@ -27,8 +27,11 @@
 #include "glfs-mem-types.h"
 
 
+extern void
+glfs_subvol_done (struct glfs *, xlator_t *);
+
 int
-glfs_graph_setup (struct glfs *fs, glusterfs_graph_t *graph)
+graph_setup (struct glfs *fs, glusterfs_graph_t *graph)
 {
 	xlator_t      *new_subvol = NULL;
 	xlator_t      *old_subvol = NULL;
@@ -77,6 +80,9 @@ unlock:
 }
 
 
+extern void
+glfs_init_done (struct glfs *fs, int ret);
+
 int
 notify (xlator_t *this, int event, void *data, ...)
 {
@@ -93,11 +99,11 @@ notify (xlator_t *this, int event, void *data, ...)
 			graph->id);
 		break;
 	case GF_EVENT_CHILD_UP:
-		glfs_graph_setup (fs, graph);
+		graph_setup (fs, graph);
 		glfs_init_done (fs, 0);
 		break;
 	case GF_EVENT_CHILD_DOWN:
-		glfs_graph_setup (fs, graph);
+		graph_setup (fs, graph);
 		glfs_init_done (fs, 1);
 		break;
 	case GF_EVENT_CHILD_CONNECTING:
diff --git a/api/src/glfs-mgmt.c b/api/src/glfs-mgmt.c
index 10d9583..c3ace84 100644
--- a/api/src/glfs-mgmt.c
+++ b/api/src/glfs-mgmt.c
@@ -324,7 +324,7 @@ out:
 }
 
 int
-glfs_get_volumeid (struct glfs *fs, char *volid, size_t size)
+pub_glfs_get_volumeid (struct glfs *fs, char *volid, size_t size)
 {
         /* TODO: Define a global macro to store UUID size */
         size_t uuid_size = 16;
@@ -366,6 +366,8 @@ done:
         return uuid_size;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_get_volumeid, 3.5.0);
+
 int
 glfs_get_volume_info (struct glfs *fs)
 {
@@ -574,7 +576,7 @@ out:
                 gf_log ("mgmt", GF_LOG_ERROR, "Server is operating at an "
                         "op-version which is not supported");
                 errno = ENOTSUP;
-                glfs_init_done (fs, -1);
+                priv_glfs_init_done (fs, -1);
         }
 
 	if (ret && ctx && !ctx->active) {
@@ -587,7 +589,7 @@ out:
 		if (!need_retry) {
                         if (!errno)
                                 errno = EINVAL;
-			glfs_init_done (fs, -1);
+			priv_glfs_init_done (fs, -1);
                 }
 	}
 
@@ -683,7 +685,7 @@ mgmt_rpc_notify (struct rpc_clnt *rpc, void *mydata, rpc_clnt_event_t event,
                                 errno = ENOTCONN;
                                 gf_log("glfs-mgmt", GF_LOG_INFO,
                                        "Exhausted all volfile servers");
-                                glfs_init_done (fs, -1);
+                                priv_glfs_init_done (fs, -1);
                                 break;
                         }
                         server = list_entry (server->list.next, typeof(*server),
@@ -700,7 +702,7 @@ mgmt_rpc_notify (struct rpc_clnt *rpc, void *mydata, rpc_clnt_event_t event,
                                         "failed to set remote-port: %d",
                                         server->port);
                                 errno = ENOTCONN;
-                                glfs_init_done (fs, -1);
+                                priv_glfs_init_done (fs, -1);
                                 break;
                         }
 
@@ -712,7 +714,7 @@ mgmt_rpc_notify (struct rpc_clnt *rpc, void *mydata, rpc_clnt_event_t event,
                                         "failed to set remote-host: %s",
                                         server->volfile_server);
                                 errno = ENOTCONN;
-                                glfs_init_done (fs, -1);
+                                priv_glfs_init_done (fs, -1);
                                 break;
                         }
 
@@ -724,7 +726,7 @@ mgmt_rpc_notify (struct rpc_clnt *rpc, void *mydata, rpc_clnt_event_t event,
                                         "failed to set transport-type: %s",
                                         server->transport);
                                 errno = ENOTCONN;
-                                glfs_init_done (fs, -1);
+                                priv_glfs_init_done (fs, -1);
                                 break;
                         }
                         gf_log ("glfs-mgmt", GF_LOG_INFO,
@@ -745,7 +747,7 @@ mgmt_rpc_notify (struct rpc_clnt *rpc, void *mydata, rpc_clnt_event_t event,
 				"failed to fetch volume file (key:%s)",
 				ctx->cmd_args.volfile_id);
                         errno = EINVAL;
-			glfs_init_done (fs, -1);
+			priv_glfs_init_done (fs, -1);
 		}
 
                 break;
diff --git a/api/src/glfs-resolve.c b/api/src/glfs-resolve.c
index 4ca2eb6..138ab42 100644
--- a/api/src/glfs-resolve.c
+++ b/api/src/glfs-resolve.c
@@ -135,7 +135,7 @@ __glfs_refresh_inode (struct glfs *fs, xlator_t *subvol, inode_t *inode)
 }
 
 int
-glfs_loc_touchup (loc_t *loc)
+priv_glfs_loc_touchup (loc_t *loc)
 {
 	char *path = NULL;
 	int   ret = -1;
@@ -163,6 +163,7 @@ out:
 	return ret;
 }
 
+GFAPI_SYMVER_PRIVATE_DEFAULT(glfs_loc_touchup, 3.4.0);
 
 int
 glfs_resolve_symlink (struct glfs *fs, xlator_t *subvol, inode_t *inode,
@@ -261,7 +262,7 @@ glfs_resolve_component (struct glfs *fs, xlator_t *subvol, inode_t *parent,
 	if (!loc.inode)
 		goto out;
 
-	glret = glfs_loc_touchup (&loc);
+	glret = priv_glfs_loc_touchup (&loc);
 	if (glret < 0) {
 		ret = -1;
 		goto out;
@@ -313,7 +314,7 @@ out:
 
 
 int
-glfs_resolve_at (struct glfs *fs, xlator_t *subvol, inode_t *at,
+priv_glfs_resolve_at (struct glfs *fs, xlator_t *subvol, inode_t *at,
 		 const char *origpath, loc_t *loc, struct iatt *iatt,
 		 int follow, int reval)
 {
@@ -390,7 +391,7 @@ glfs_resolve_at (struct glfs *fs, xlator_t *subvol, inode_t *at,
 			if (ret < 0)
 				break;
 
-			ret = glfs_resolve_at (fs, subvol, parent, lpath,
+			ret = priv_glfs_resolve_at (fs, subvol, parent, lpath,
 					       &sym_loc,
 					       /* followed iatt becomes the
 						  component iatt
@@ -444,7 +445,7 @@ glfs_resolve_at (struct glfs *fs, xlator_t *subvol, inode_t *at,
 		ret = 0;
 	}
 
-	glfs_loc_touchup (loc);
+	priv_glfs_loc_touchup (loc);
 out:
 	GF_FREE (path);
 
@@ -453,6 +454,8 @@ out:
 	return ret;
 }
 
+GFAPI_SYMVER_PRIVATE_DEFAULT(glfs_resolve_at, 3.4.0);
+
 
 int
 glfs_resolve_path (struct glfs *fs, xlator_t *subvol, const char *origpath,
@@ -462,13 +465,13 @@ glfs_resolve_path (struct glfs *fs, xlator_t *subvol, const char *origpath,
 	inode_t *cwd = NULL;
 
 	if (origpath[0] == '/')
-		return glfs_resolve_at (fs, subvol, NULL, origpath, loc, iatt,
-					follow, reval);
+		return priv_glfs_resolve_at (fs, subvol, NULL, origpath, loc,
+                                             iatt, follow, reval);
 
 	cwd = glfs_cwd_get (fs);
 
-	ret = glfs_resolve_at (fs, subvol, cwd, origpath, loc, iatt,
-			       follow, reval);
+	ret = priv_glfs_resolve_at (fs, subvol, cwd, origpath, loc, iatt,
+                                    follow, reval);
 	if (cwd)
 		inode_unref (cwd);
 
@@ -791,7 +794,7 @@ __glfs_active_subvol (struct glfs *fs)
 }
 
 xlator_t *
-glfs_active_subvol (struct glfs *fs)
+priv_glfs_active_subvol (struct glfs *fs)
 {
 	xlator_t      *subvol = NULL;
 	xlator_t      *old_subvol = NULL;
@@ -812,14 +815,15 @@ glfs_active_subvol (struct glfs *fs)
 	glfs_unlock (fs);
 
 	if (old_subvol)
-		glfs_subvol_done (fs, old_subvol);
+		priv_glfs_subvol_done (fs, old_subvol);
 
 	return subvol;
 }
 
+GFAPI_SYMVER_PRIVATE_DEFAULT(glfs_active_subvol, 3.4.0);
 
 void
-glfs_subvol_done (struct glfs *fs, xlator_t *subvol)
+priv_glfs_subvol_done (struct glfs *fs, xlator_t *subvol)
 {
 	int ref = 0;
 	xlator_t *active_subvol = NULL;
@@ -840,6 +844,7 @@ glfs_subvol_done (struct glfs *fs, xlator_t *subvol)
 	}
 }
 
+GFAPI_SYMVER_PRIVATE_DEFAULT(glfs_subvol_done, 3.4.0);
 
 int
 __glfs_cwd_set (struct glfs *fs, inode_t *inode)
diff --git a/api/src/glfs.c b/api/src/glfs.c
index 4329cc6..5c137ef 100644
--- a/api/src/glfs.c
+++ b/api/src/glfs.c
@@ -280,8 +280,8 @@ out:
 
 
 int
-glfs_set_xlator_option (struct glfs *fs, const char *xlator, const char *key,
-			const char *value)
+pub_glfs_set_xlator_option (struct glfs *fs, const char *xlator,
+                            const char *key, const char *value)
 {
 	xlator_cmdline_option_t *option = NULL;
 
@@ -319,9 +319,12 @@ enomem:
 	return -1;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_set_xlator_option, 3.4.0);
+
+
 int
-glfs_unset_volfile_server (struct glfs *fs, const char *transport,
-                           const char *host, const int port)
+pub_glfs_unset_volfile_server (struct glfs *fs, const char *transport,
+                               const char *host, const int port)
 {
         cmd_args_t       *cmd_args = NULL;
         server_cmdline_t *server = NULL;
@@ -347,9 +350,12 @@ out:
         return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_unset_volfile_server, 3.5.1);
+
+
 int
-glfs_set_volfile_server (struct glfs *fs, const char *transport,
-                         const char *host, int port)
+pub_glfs_set_volfile_server (struct glfs *fs, const char *transport,
+                             const char *host, int port)
 {
         cmd_args_t            *cmd_args = NULL;
         server_cmdline_t      *server = NULL;
@@ -421,27 +427,44 @@ out:
         return ret;
 }
 
-int glfs_setfsuid (uid_t fsuid)
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_set_volfile_server, 3.4.0);
+
+
+int
+pub_glfs_setfsuid (uid_t fsuid)
 {
 	return syncopctx_setfsuid (&fsuid);
 }
 
-int glfs_setfsgid (gid_t fsgid)
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_setfsuid, 3.4.2);
+
+
+int
+pub_glfs_setfsgid (gid_t fsgid)
 {
 	return syncopctx_setfsgid (&fsgid);
 }
 
-int glfs_setfsgroups (size_t size, const gid_t *list)
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_setfsgid, 3.4.2);
+
+
+int
+pub_glfs_setfsgroups (size_t size, const gid_t *list)
 {
 	return syncopctx_setfsgroups(size, list);
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_setfsgroups, 3.4.2);
+
+
 struct glfs *
-glfs_from_glfd (struct glfs_fd *glfd)
+pub_glfs_from_glfd (struct glfs_fd *glfd)
 {
 	return glfd->fs;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_from_glfd, 3.4.0);
+
 
 struct glfs_fd *
 glfs_fd_new (struct glfs *fs)
@@ -509,7 +532,7 @@ glfs_poller (void *data)
 
 
 struct glfs *
-glfs_new (const char *volname)
+pub_glfs_new (const char *volname)
 {
 	struct glfs     *fs = NULL;
 	int              ret = -1;
@@ -555,9 +578,11 @@ glfs_new (const char *volname)
 	return fs;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_new, 3.4.0);
+
 
 int
-glfs_set_volfile (struct glfs *fs, const char *volfile)
+pub_glfs_set_volfile (struct glfs *fs, const char *volfile)
 {
 	cmd_args_t  *cmd_args = NULL;
 
@@ -571,9 +596,11 @@ glfs_set_volfile (struct glfs *fs, const char *volfile)
 	return 0;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_set_volfile, 3.4.0);
+
 
 int
-glfs_set_logging (struct glfs *fs, const char *logfile, int loglevel)
+pub_glfs_set_logging (struct glfs *fs, const char *logfile, int loglevel)
 {
 	int  ret = 0;
         char *tmplog = NULL;
@@ -598,6 +625,8 @@ out:
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_set_logging, 3.4.0);
+
 
 int
 glfs_init_wait (struct glfs *fs)
@@ -620,7 +649,7 @@ glfs_init_wait (struct glfs *fs)
 
 
 void
-glfs_init_done (struct glfs *fs, int ret)
+priv_glfs_init_done (struct glfs *fs, int ret)
 {
 	glfs_init_cbk init_cbk;
 
@@ -650,6 +679,8 @@ out:
 	return;
 }
 
+GFAPI_SYMVER_PRIVATE_DEFAULT(glfs_init_done, 3.4.0);
+
 
 int
 glfs_init_common (struct glfs *fs)
@@ -687,7 +718,7 @@ glfs_init_async (struct glfs *fs, glfs_init_cbk cbk)
 
 
 int
-glfs_init (struct glfs *fs)
+pub_glfs_init (struct glfs *fs)
 {
 	int  ret = -1;
 
@@ -700,9 +731,14 @@ glfs_init (struct glfs *fs)
 	return ret;
 }
 
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_init, 3.4.0);
+
+
+extern xlator_t *
+priv_glfs_active_subvol (struct glfs *);
 
 int
-glfs_fini (struct glfs *fs)
+pub_glfs_fini (struct glfs *fs)
 {
         int             ret = -1;
         int             countdown = 100;
@@ -733,9 +769,9 @@ glfs_fini (struct glfs *fs)
          *pool*/
         ret = (call_pool->cnt == 0)? 0: -1;
 
-        subvol = glfs_active_subvol (fs);
+        subvol = priv_glfs_active_subvol (fs);
         if (subvol) {
-                /* PARENT_DOWN within glfs_subvol_done() is issued only
+                /* PARENT_DOWN within priv_glfs_subvol_done() is issued only
                    on graph switch (new graph should activiate and
                    decrement the extra @winds count taken in glfs_graph_setup()
 
@@ -748,10 +784,13 @@ glfs_fini (struct glfs *fs)
                 */
         }
 
-        glfs_subvol_done (fs, subvol);
+        priv_glfs_subvol_done (fs, subvol);
 
         if (gf_log_fini(ctx) != 0)
                 ret = -1;
 
         return ret;
 }
+
+GFAPI_SYMVER_PUBLIC_DEFAULT(glfs_fini, 3.4.0);
+
diff --git a/configure.ac b/configure.ac
index 078ec99..f2d0dbf 100644
--- a/configure.ac
+++ b/configure.ac
@@ -173,6 +173,7 @@ AC_CONFIG_FILES([Makefile
                 libgfchangelog.pc
                 api/Makefile
                 api/src/Makefile
+                api/src/gfapi.map
                 api/examples/Makefile
                 api/examples/__init__.py
                 api/examples/setup.py
diff --git a/heal/src/glfs-heal.c b/heal/src/glfs-heal.c
index 7d22e08..403bf4b 100644
--- a/heal/src/glfs-heal.c
+++ b/heal/src/glfs-heal.c
@@ -37,6 +37,10 @@ out:
         return ret;
 }
 
+extern int glfs_loc_touchup (loc_t *);
+xlator_t *glfs_active_subvol (struct glfs *);
+void glfs_subvol_done (struct glfs *, xlator_t *);
+
 int
 glfsh_get_index_dir_loc (loc_t *rootloc, xlator_t *xl, loc_t *dirloc,
                          int32_t *op_errno)
-- 
2.2.1

